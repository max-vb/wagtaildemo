- name: install prerequest packages
  apt: name={{item}} state=present
  with_items:
    - python-pip
    - python-dev
    - build-essential
    - autoconf
    - libtool
    - zlib1g-dev
    - libjpeg-dev
    - postgresql-server-dev-all
    - git
    - python-pymongo
    - python-psycopg2
    - postgresql-client
    - python-virtualenv

- name: create wagtail group
  group: "name={{WT_GROUP}} gid={{WT_GID}} state=present"

- name: create wagtail user
  user: >
    name="{{WT_USER}}"
    uid="{{WT_UID}}"
    group="{{WT_GROUP}}"
    groups="{{WT_GROUPS}}"
    home="{{WT_HOME}}"
    state=present
    shell=/bin/bash

- name: clone wagtaildemo
  git: >
    repo=https://github.com/torchbox/wagtaildemo
    clone=yes
    dest="{{WT_HOME}}/{{PROJ_NAME}}"
    force=no
  register: result_clone_wagtaildemo
  become: yes
  become_user: "{{WT_USER}}"
  ignore_errors: yes

- name: check virtualenv
  stat: path= {{WT_HOME}}/{{PROJ_NAME}}/venv
  register: result_check_venv

- name: create python VEnv
  shell: "cd {{WT_HOME}}/{{PROJ_NAME}} && virtualenv venv"
  when: not result_check_venv.stat.exists

- name: copy install_wt_deps
  template: >
    src=templates/install_wt_deps.sh
    dest=/tmp/install_wt_deps.sh
    owner=root
    group=root
    mode=0755

- name: install dependencies
  shell: /tmp/install_wt_deps.sh removes={{WT_HOME}}/{{PROJ_NAME}}/requirements.txt executable=/bin/bash
  register: result_install_dependencies
  changed_when: result_install_dependencies.stdout.find('Requirement already satisfied') == -1
  # become: yes
  # become_user: "{{WT_USER}}"

- name: copy patches
  template: >
    src="templates/{{ item }}"
    dest="{{WT_HOME}}/{{PROJ_NAME}}/wagtaildemo/settings/{{ item }}"
    owner="{{WT_USER}}"
    group="{{WT_GROUP}}"
    mode=0644
  with_items:
    - "base.py.patch"
    - "production.py.patch"

- name: apply patches
  shell: "cd {{WT_HOME}}/{{PROJ_NAME}}/wagtaildemo/settings && patch < base.py.patch && patch < production.py.patch"
  register: result_patch_settings
  changed_when: result_patch_settings.stdout.find('Skipping patch') == -1
  failed_when: result_patch_settings.rc != 0 and result_patch_settings.stdout.find('Skipping patch') == -1
  become: yes
  become_user: "{{WT_USER}}"

- name: create data structure
  django_manage: app_path={{WT_HOME}}/{{PROJ_NAME}} command=migrate virtualenv={{WT_HOME}}/{{PROJ_NAME}}/venv
  become: yes
  become_user: "{{WT_USER}}"

- name: load initial data
  django_manage: "app_path={{WT_HOME}}/{{PROJ_NAME}} command=load_initial_data virtualenv={{WT_HOME}}/{{PROJ_NAME}}/venv"
  become: yes
  become_user: "{{WT_USER}}"

- name: copy create_superuser script
  template: src=templates/django_create_su.sh dest=/tmp/django_create_su.sh
    owner=root group=root mode=0755

- name: create superuser
  shell: /tmp/django_create_su.sh removes=/tmp/django_create_su.sh
  register: result_create_superuser
  changed_when: "result_create_superuser.stderr.find('already exists') == -1"
  become: yes
  become_user: "{{WT_USER}}"

- name: collect static
  django_manage: app_path={{WT_HOME}}/{{PROJ_NAME}} command=collectstatic virtualenv={{WT_HOME}}/{{PROJ_NAME}}/venv
  become: yes
  become_user: "{{WT_USER}}"

- name: configure uwsgi
  template: src=templates/uwsgi.ini dest={{WT_HOME}}/{{PROJ_NAME}}/uwsgi.ini
    owner=root group=root mode=0644

- set_fact:
    WSGI_PATH=/usr/bin/uwsgi

- name: create uwsgi service
  template: src=templates/uwsgi.service dest=/lib/systemd/system/uwsgi_{{PROJ_NAME}}.service
    owner=root group=root

- name: start uwsgi service
  service: name=uwsgi_{{PROJ_NAME}} state=started enabled=yes
